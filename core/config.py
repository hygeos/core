# standard library imports
from textwrap import dedent
from pathlib import Path
from typing import Dict
import argparse
import shutil
import sys
        
# third party imports
import toml
        
# sub package imports
from core.output import rgb, error, disp

loaded_config_path = None
loaded_config = None

config_file_name = "core-config.toml"

def load(config_path: Path=None):
    
    local_config_file = Path.cwd() / config_file_name
    global_config_file = Path.home() / config_file_name
    
    config_file = None
    
    # when file path is overriden (usefull for tests)
    if config_path is not None:
        if config_path.is_dir():
            config_path = config_path / config_file_name
        
        if not config_path.is_file():
            raise FileNotFoundError(f"Could not find {config_file_name} file at {config_path}")
        local_config_file = config_path
    
    # default behavior
    if local_config_file.is_file():
        config_file = local_config_file
    elif global_config_file.is_file():
        config_file = global_config_file
    else:
        raise FileNotFoundError(f"Could not find {config_file_name} file.\n" +
                                " -> Please initiate it with the command:\n" +
                                "   python -m core.config init")
    
    # read
    cfg = toml.load(config_file)
    
    # set package attributes
    global loaded_config_path
    global loaded_config
    loaded_config_path = config_file
    loaded_config = cfg


def get(section, key, *, default=None):
    """
    Returns the key if present in coreconfig.toml
    """
    
    if loaded_config_path is None:
        raise RuntimeError("Module core.config did load any config file yet. Please call core.config.load ")
    
    if section not in loaded_config:
        raise KeyError(f"Missing section {section} in file {loaded_config_path}")
    
    if key not in loaded_config[section]:
        if default is None:
            raise KeyError(f"Missing key {key} in section {section} in file {loaded_config_path}")
        else:
            return default
    
    return loaded_config[section][key]
    
    
def init(data_dir: Path|None):
    
    local_config_file = Path.cwd() / config_file_name
    
    if local_config_file.is_file():
        disp(rgb.red, "Warning: ", rgb.orange, f'Configuration file {local_config_file} is already present')
        return -1
        
    else:
        commented = ""
        if data_dir is None:
            commented = "# " 
            data_dir = Path("PATH/TO/DATA_DIR")
        
        # Initialize default config file
        content = dedent(
            f"""
            # Configuration file
            # This file has been generated by eoread.utils.config

            [data]
            description = \"\"\"
            stores paths used to read and save disposable data.
                - dir:       base directory for storing and reading disposable data
                - ancillary: sub directory containing ancillary data, mainly downloaded on the fly
                - samples:   sub directory containing sample products, for testing
                - static:    sub directory used for processing
            \"\"\"
            {commented}dir = "{data_dir}"
            # dir_static = "{data_dir}/static"
            # dir_samples = "{data_dir}/sample_products"
            # dir_ancillary = "{data_dir}/ancillary"
        """
        )
        
        with open(local_config_file, "w") as fp:
            disp(rgb.blue, "Created ", rgb.default, local_config_file.name, rgb.blue, f" at {local_config_file.parent}")
            fp.writelines(content)


def init_cmd(args=None):
    
    parser = argparse.ArgumentParser(description='Command to instantiate a default core-config.toml file in the working directory')
    parser.add_argument('--from-home',  action="store_true", help="Use the core-config.toml file from the home folder as template for the init")
    args = parser.parse_args()
    
    dest = Path.cwd() / config_file_name
    
    if args.from_home:
        source = Path.home() / config_file_name
        
        if not source.is_file():
            error(f"Error: could not find file {source}")    
        
        shutil.copy(source, dest)
        disp(rgb.blue, "Created file ", rgb.default, str(dest.name), rgb.blue, f" at {dest.parent}")
    else:
        
        ret = init(None)
        if ret == -1:
            exit()
    
    disp(rgb.orange, "Please configure it before using.")
    # if not 
    # init(None)